package com.lefu.ppscale.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DEVICE_MODEL".
*/
public class DeviceModelDao extends AbstractDao<DeviceModel, Long> {

    public static final String TABLENAME = "DEVICE_MODEL";

    /**
     * Properties of entity DeviceModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property DeviceMac = new Property(1, String.class, "deviceMac", false, "DEVICE_MAC");
        public final static Property DeviceName = new Property(2, String.class, "deviceName", false, "DEVICE_NAME");
        public final static Property DeviceType = new Property(3, int.class, "deviceType", false, "DEVICE_TYPE");
        public final static Property Sn = new Property(4, String.class, "sn", false, "SN");
        public final static Property Ssid = new Property(5, String.class, "ssid", false, "SSID");
        public final static Property Rssi = new Property(6, int.class, "rssi", false, "RSSI");
        public final static Property AccuracyType = new Property(7, int.class, "accuracyType", false, "ACCURACY_TYPE");
        public final static Property DeviceProtocolType = new Property(8, int.class, "deviceProtocolType", false, "DEVICE_PROTOCOL_TYPE");
        public final static Property DeviceCalcuteType = new Property(9, int.class, "deviceCalcuteType", false, "DEVICE_CALCUTE_TYPE");
        public final static Property DevicePowerType = new Property(10, int.class, "devicePowerType", false, "DEVICE_POWER_TYPE");
        public final static Property DeviceFuncType = new Property(11, int.class, "deviceFuncType", false, "DEVICE_FUNC_TYPE");
        public final static Property DeviceUnitType = new Property(12, int.class, "deviceUnitType", false, "DEVICE_UNIT_TYPE");
        public final static Property DevicePower = new Property(13, int.class, "devicePower", false, "DEVICE_POWER");
        public final static Property FirmwareVersion = new Property(14, String.class, "firmwareVersion", false, "FIRMWARE_VERSION");
        public final static Property HardwareVersion = new Property(15, String.class, "hardwareVersion", false, "HARDWARE_VERSION");
        public final static Property SerialNumber = new Property(16, String.class, "serialNumber", false, "SERIAL_NUMBER");
    }


    public DeviceModelDao(DaoConfig config) {
        super(config);
    }
    
    public DeviceModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DEVICE_MODEL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"DEVICE_MAC\" TEXT UNIQUE ," + // 1: deviceMac
                "\"DEVICE_NAME\" TEXT," + // 2: deviceName
                "\"DEVICE_TYPE\" INTEGER NOT NULL ," + // 3: deviceType
                "\"SN\" TEXT," + // 4: sn
                "\"SSID\" TEXT," + // 5: ssid
                "\"RSSI\" INTEGER NOT NULL ," + // 6: rssi
                "\"ACCURACY_TYPE\" INTEGER NOT NULL ," + // 7: accuracyType
                "\"DEVICE_PROTOCOL_TYPE\" INTEGER NOT NULL ," + // 8: deviceProtocolType
                "\"DEVICE_CALCUTE_TYPE\" INTEGER NOT NULL ," + // 9: deviceCalcuteType
                "\"DEVICE_POWER_TYPE\" INTEGER NOT NULL ," + // 10: devicePowerType
                "\"DEVICE_FUNC_TYPE\" INTEGER NOT NULL ," + // 11: deviceFuncType
                "\"DEVICE_UNIT_TYPE\" INTEGER NOT NULL ," + // 12: deviceUnitType
                "\"DEVICE_POWER\" INTEGER NOT NULL ," + // 13: devicePower
                "\"FIRMWARE_VERSION\" TEXT," + // 14: firmwareVersion
                "\"HARDWARE_VERSION\" TEXT," + // 15: hardwareVersion
                "\"SERIAL_NUMBER\" TEXT);"); // 16: serialNumber
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DEVICE_MODEL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DeviceModel entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String deviceMac = entity.getDeviceMac();
        if (deviceMac != null) {
            stmt.bindString(2, deviceMac);
        }
 
        String deviceName = entity.getDeviceName();
        if (deviceName != null) {
            stmt.bindString(3, deviceName);
        }
        stmt.bindLong(4, entity.getDeviceType());
 
        String sn = entity.getSn();
        if (sn != null) {
            stmt.bindString(5, sn);
        }
 
        String ssid = entity.getSsid();
        if (ssid != null) {
            stmt.bindString(6, ssid);
        }
        stmt.bindLong(7, entity.getRssi());
        stmt.bindLong(8, entity.getAccuracyType());
        stmt.bindLong(9, entity.getDeviceProtocolType());
        stmt.bindLong(10, entity.getDeviceCalcuteType());
        stmt.bindLong(11, entity.getDevicePowerType());
        stmt.bindLong(12, entity.getDeviceFuncType());
        stmt.bindLong(13, entity.getDeviceUnitType());
        stmt.bindLong(14, entity.getDevicePower());
 
        String firmwareVersion = entity.getFirmwareVersion();
        if (firmwareVersion != null) {
            stmt.bindString(15, firmwareVersion);
        }
 
        String hardwareVersion = entity.getHardwareVersion();
        if (hardwareVersion != null) {
            stmt.bindString(16, hardwareVersion);
        }
 
        String serialNumber = entity.getSerialNumber();
        if (serialNumber != null) {
            stmt.bindString(17, serialNumber);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DeviceModel entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String deviceMac = entity.getDeviceMac();
        if (deviceMac != null) {
            stmt.bindString(2, deviceMac);
        }
 
        String deviceName = entity.getDeviceName();
        if (deviceName != null) {
            stmt.bindString(3, deviceName);
        }
        stmt.bindLong(4, entity.getDeviceType());
 
        String sn = entity.getSn();
        if (sn != null) {
            stmt.bindString(5, sn);
        }
 
        String ssid = entity.getSsid();
        if (ssid != null) {
            stmt.bindString(6, ssid);
        }
        stmt.bindLong(7, entity.getRssi());
        stmt.bindLong(8, entity.getAccuracyType());
        stmt.bindLong(9, entity.getDeviceProtocolType());
        stmt.bindLong(10, entity.getDeviceCalcuteType());
        stmt.bindLong(11, entity.getDevicePowerType());
        stmt.bindLong(12, entity.getDeviceFuncType());
        stmt.bindLong(13, entity.getDeviceUnitType());
        stmt.bindLong(14, entity.getDevicePower());
 
        String firmwareVersion = entity.getFirmwareVersion();
        if (firmwareVersion != null) {
            stmt.bindString(15, firmwareVersion);
        }
 
        String hardwareVersion = entity.getHardwareVersion();
        if (hardwareVersion != null) {
            stmt.bindString(16, hardwareVersion);
        }
 
        String serialNumber = entity.getSerialNumber();
        if (serialNumber != null) {
            stmt.bindString(17, serialNumber);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DeviceModel readEntity(Cursor cursor, int offset) {
        DeviceModel entity = new DeviceModel( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // deviceMac
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // deviceName
            cursor.getInt(offset + 3), // deviceType
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // sn
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // ssid
            cursor.getInt(offset + 6), // rssi
            cursor.getInt(offset + 7), // accuracyType
            cursor.getInt(offset + 8), // deviceProtocolType
            cursor.getInt(offset + 9), // deviceCalcuteType
            cursor.getInt(offset + 10), // devicePowerType
            cursor.getInt(offset + 11), // deviceFuncType
            cursor.getInt(offset + 12), // deviceUnitType
            cursor.getInt(offset + 13), // devicePower
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // firmwareVersion
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // hardwareVersion
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16) // serialNumber
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DeviceModel entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDeviceMac(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDeviceName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDeviceType(cursor.getInt(offset + 3));
        entity.setSn(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSsid(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setRssi(cursor.getInt(offset + 6));
        entity.setAccuracyType(cursor.getInt(offset + 7));
        entity.setDeviceProtocolType(cursor.getInt(offset + 8));
        entity.setDeviceCalcuteType(cursor.getInt(offset + 9));
        entity.setDevicePowerType(cursor.getInt(offset + 10));
        entity.setDeviceFuncType(cursor.getInt(offset + 11));
        entity.setDeviceUnitType(cursor.getInt(offset + 12));
        entity.setDevicePower(cursor.getInt(offset + 13));
        entity.setFirmwareVersion(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setHardwareVersion(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setSerialNumber(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DeviceModel entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DeviceModel entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DeviceModel entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
