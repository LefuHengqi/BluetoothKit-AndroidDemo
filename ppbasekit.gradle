apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'maven-publish'

def releaseTime() {
//GMT+8代表北京时间
    return new Date().format("yyyyMMdd", TimeZone.getTimeZone("GMT+8"))
}

def fileName

def GROUP_ID = "com.lefu.ppbasekit"
def ARTIFACT_ID = "ppbasekit"
def LIB_VERSION = "4.0.1.10"
def LIB_VERSION_CODE = "105"

android {
    namespace 'com.lefu.ppbasekit'
    compileSdkVersion 31

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    kotlinOptions {
        jvmTarget = '17'
    }

    buildFeatures {
        buildConfig = true
    }

    defaultConfig {
        minSdkVersion 18
        versionCode LIB_VERSION_CODE as int
        versionName LIB_VERSION

        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'

    }
    buildTypes {
        debug {
            debuggable true
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        release {
            debuggable false
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

}

dependencies {
//    api fileTree(include: ['*.jar', '*.aar'], dir: 'libs')
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.8'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.3.8'
    api(project(":ppsdkkit:lefulib:lfgson"))

}

// 配置发布
afterEvaluate {
    publishing {
        publications {
            release(MavenPublication) {
                from components.release  // 发布release版本

                // 自定义你的包信息
                groupId = GROUP_ID
                artifactId = ARTIFACT_ID
                version = LIB_VERSION

                // 可选：包含源码和文档
                //  artifact sourcesJar
                //  artifact javadocJar
            }
        }

        repositories {
            maven {
                // 本地仓库路径（默认生成在模块的build/repo目录）
//                url = layout.buildDirectory.dir('repo')

                // 或者指定绝对路径
                url = uri("${rootProject.projectDir}/maven")
            }
        }
    }
}
























