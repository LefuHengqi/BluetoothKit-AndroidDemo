apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'maven-publish'

def releaseTime() {
//GMT+8代表北京时间
    return new Date().format("yyyyMMdd", TimeZone.getTimeZone("GMT+8"))
}

def fileName

def GROUP_ID = "com.lefu.ppbasekit"
def ARTIFACT_ID = "ppbasekit"
//def LIB_VERSION = "4.0.1.10"
//def LIB_VERSION_CODE = "105"

android {
    namespace 'com.lefu.ppbasekit'
    compileSdkVersion 31

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    kotlinOptions {
        jvmTarget = '17'
    }

    buildFeatures {
        buildConfig = true
    }

    defaultConfig {
        minSdkVersion 18
        versionCode LIB_VERSION_CODE as int
        versionName LIB_VERSION

        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'

    }
    
    // 配置打包选项，排除不需要的文件
    packagingOptions {
        pickFirst '**/AndroidManifest.xml'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/*.kotlin_module'
        exclude 'proguard.txt'
    }

    buildTypes {
        debug {
            debuggable true
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        release {
            debuggable false
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

}

dependencies {
    api fileTree(include: ['*.jar', '*.aar'], dir: 'libs')
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.8'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.3.8'
//    api(project(":ppsdkkit:lefulib:lfgson"))

}

// 创建JAR任务
task jar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    from android.sourceSets.main.kotlin.srcDirs
    archiveClassifier = ''
    archiveFileName = "${ARTIFACT_ID}-${LIB_VERSION}.jar"
    destinationDirectory = file("$buildDir/libs")
}

// 创建包含编译后类文件的JAR任务
task classesJar(type: Jar) {
    from "$buildDir/intermediates/compile_library_classes_jar/release/classes.jar"
    archiveClassifier = 'classes'
    archiveFileName = "${ARTIFACT_ID}-${LIB_VERSION}-classes.jar"
    destinationDirectory = file("$buildDir/libs")
}

// 创建源码JAR任务
task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    from android.sourceSets.main.kotlin.srcDirs
    archiveClassifier = 'sources'
    archiveFileName = "${ARTIFACT_ID}-${LIB_VERSION}-sources.jar"
    destinationDirectory = file("$buildDir/libs")
}

// 确保JAR任务依赖于编译任务
jar.dependsOn 'compileReleaseJavaWithJavac'
classesJar.dependsOn 'compileReleaseJavaWithJavac'

// 配置发布
afterEvaluate {
    publishing {
        publications {
            release(MavenPublication) {
                // 不使用components.release，手动配置artifacts
                
                // 自定义你的包信息
                groupId = GROUP_ID
                artifactId = ARTIFACT_ID
                version = LIB_VERSION

                // 添加JAR文件到发布
                artifact classesJar
                artifact sourcesJar

                // 自定义包信息
                pom {
                    name = "${ARTIFACT_ID}-${LIB_VERSION}"
                    description = 'PPBaseKit JAR Library for Android'
                    url = 'https://github.com/yourusername/yourrepository'
                    
                    licenses {
                        license {
                            name = 'The Apache License, Version 2.0'
                            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }
                    
                    developers {
                        developer {
                            id = 'developer'
                            name = 'Developer Name'
                            email = 'developer@example.com'
                        }
                    }
                    
                    scm {
                        connection = 'scm:git:git://github.com/yourusername/yourrepository.git'
                        developerConnection = 'scm:git:ssh://github.com:yourusername/yourrepository.git'
                        url = 'https://github.com/yourusername/yourrepository/tree/main'
                    }
                }
            }
        }

        repositories {
            maven {
                // 发布到指定的maven目录
                url = uri("${rootProject.projectDir}/maven")
                
                // 确保目录存在
                allowInsecureProtocol = true
            }
        }
    }
    
    // 自定义AAR文件名
    tasks.withType(Zip) { task ->
        if (task.name.contains('bundleReleaseAar')) {
            task.archiveFileName = "${ARTIFACT_ID}-${LIB_VERSION}.aar"
        }
    }
    
    // 创建自定义任务来清理AAR文件
    task cleanAarFiles {
        doLast {
            def aarFile = file("build/outputs/aar/${ARTIFACT_ID}-${LIB_VERSION}.aar")
            if (aarFile.exists()) {
                cleanAarFile(aarFile)
            }
        }
    }
    
    // 清理Maven发布的AAR文件
    task cleanMavenAarFiles {
        doLast {
            def mavenAarFile = file("${project.rootDir}/maven/com/lefu/ppbasekit/${ARTIFACT_ID}/${LIB_VERSION}/${ARTIFACT_ID}-${LIB_VERSION}.aar")
            if (mavenAarFile.exists()) {
                cleanAarFile(mavenAarFile)
            }
        }
    }
    
    // 通用的AAR清理闭包
    ext.cleanAarFile = { File aarFile ->
        def tempDir = file("build/temp-aar-${System.currentTimeMillis()}")
        tempDir.deleteDir()
        tempDir.mkdirs()
        
        // 解压AAR
        copy {
            from zipTree(aarFile)
            into tempDir
        }
        
        // 删除不需要的文件
        delete file("${tempDir}/R.txt")
        delete file("${tempDir}/AndroidManifest.xml")
        // 完全删除META-INF目录
        delete file("${tempDir}/META-INF")
        
        // 处理classes.jar中的META-INF
        def classesJar = file("${tempDir}/classes.jar")
        if (classesJar.exists()) {
            def classesTemp = file("build/temp-classes-${System.currentTimeMillis()}")
            classesTemp.deleteDir()
            classesTemp.mkdirs()
            
            // 解压classes.jar
            copy {
                from zipTree(classesJar)
                into classesTemp
            }
            
            // 删除classes.jar中的META-INF目录中的非必要文件，保留MANIFEST.MF
            def metaInfDir = file("${classesTemp}/META-INF")
            if (metaInfDir.exists()) {
                metaInfDir.listFiles().each { file ->
                    if (file.name != 'MANIFEST.MF') {
                        file.delete()
                    }
                }
            }
            
            // 重新打包classes.jar
            ant.jar(destfile: classesJar, basedir: classesTemp)
            
            // 清理临时目录
            classesTemp.deleteDir()
        }
        
        // 重新打包AAR
        ant.zip(destfile: aarFile, basedir: tempDir)
        
        // 清理临时目录
        tempDir.deleteDir()
    }
    
    // 在bundleReleaseAar任务后执行清理
    tasks.named('bundleReleaseAar').configure {
        finalizedBy cleanAarFiles
    }
    
    // 在publishToMavenLocal任务后执行Maven AAR清理
    tasks.named('publishToMavenLocal').configure {
        finalizedBy cleanMavenAarFiles
    }
}
























