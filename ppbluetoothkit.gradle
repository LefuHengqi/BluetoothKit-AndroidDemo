apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'maven-publish'

def releaseTime() {
//GMT+8代表北京时间
    return new Date().format("yyyyMMdd", TimeZone.getTimeZone("GMT+8"))
}

def fileName

def GROUP_ID = "com.lefu.ppbluetoothkit"
def ARTIFACT_ID = "ppbluetoothkit"

android {
    namespace 'com.lefu.ppbluetoothkit'
    compileSdkVersion 31

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    kotlinOptions {
        jvmTarget = '17'
    }

    buildFeatures {
        buildConfig = true
    }


    defaultConfig {
        minSdkVersion 18
        versionCode LIB_VERSION_CODE as int
        versionName LIB_VERSION

        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'

    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            android.libraryVariants.all { variant ->
                variant.outputs.all { output ->
                    def f = output.outputFileName
                    if (f != null && f.endsWith('.aar')) {
                        fileName = "${ARTIFACT_ID}_v${defaultConfig.versionName}_${releaseTime()}.aar"
                        output.outputFileName = fileName
                    }
                }
            }
        }
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            android.libraryVariants.all { variant ->
                variant.outputs.all { output ->
                    def f = output.outputFileName
                    if (f != null && f.endsWith('.aar')) {
                        fileName = "${ARTIFACT_ID}_v${defaultConfig.versionName}_${releaseTime()}.aar"
                        output.outputFileName = fileName
                    }
                }
            }
        }
    }

    packagingOptions {
        // 排除不需要的META-INF文件
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
    }

}

dependencies {
    api fileTree(include: ['*.jar', '*.aar'], dir: 'libs')
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.7.3'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.7.3'
//    api project(":ppsdkkit:lefulib:bluetoothkit")
    compileOnly(project(":ppsdkkit:ppbasekit"))

}



// 配置发布
afterEvaluate {
    publishing {
        publications {
            release(MavenPublication) {
                // 发布AAR文件
                from components.release

                // 自定义你的包信息
                groupId = GROUP_ID
                artifactId = ARTIFACT_ID
                version = LIB_VERSION
                
                // 添加POM信息
                pom {
                    name = ARTIFACT_ID
                    description = 'PPBluetoothKit AAR Library for Android'
                    url = 'https://github.com/lefu/ppbluetoothkit'
                    
                    licenses {
                        license {
                            name = 'The Apache License, Version 2.0'
                            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }
                    
                    developers {
                        developer {
                            id = 'lefu'
                            name = 'Lefu Developer'
                            email = 'developer@lefu.com'
                        }
                    }
                    
                    scm {
                        connection = 'scm:git:git://github.com/lefu/ppbluetoothkit.git'
                        developerConnection = 'scm:git:ssh://github.com/lefu/ppbluetoothkit.git'
                        url = 'https://github.com/lefu/ppbluetoothkit'
                    }
                }
            }
        }

        repositories {
            maven {
                // 发布到指定的maven目录
                url = uri("${rootProject.projectDir}/maven")
                
                // 确保目录存在
                allowInsecureProtocol = true
            }
        }
    }
    
    // 自定义AAR文件名
    tasks.withType(Zip) { task ->
        if (task.name.contains('bundleReleaseAar')) {
            task.archiveFileName = "${ARTIFACT_ID}-${LIB_VERSION}.aar"
        }
    }
    
    // 确保发布任务依赖于AAR构建任务
    tasks.withType(PublishToMavenRepository) { task ->
        task.dependsOn 'bundleReleaseAar'
    }
    
    tasks.withType(PublishToMavenLocal) { task ->
        task.dependsOn 'bundleReleaseAar'
    }
    
    // 创建自定义任务来清理AAR文件
    task cleanAarFiles {
        doLast {
            def aarFile = file("build/outputs/aar/${ARTIFACT_ID}-${LIB_VERSION}.aar")
            if (aarFile.exists()) {
                cleanAarFile(aarFile)
            }
        }
    }
    
    // 清理Maven发布的AAR文件
    task cleanMavenAarFiles {
        doLast {
            def mavenAarFile = file("${project.rootDir}/maven/com/lefu/ppbluetoothkit/${ARTIFACT_ID}/${LIB_VERSION}/${ARTIFACT_ID}-${LIB_VERSION}.aar")
            if (mavenAarFile.exists()) {
                cleanAarFile(mavenAarFile)
            }
        }
    }
    
    // 通用的AAR清理闭包
    ext.cleanAarFile = { File aarFile ->
        def tempDir = file("build/temp-aar-${System.currentTimeMillis()}")
        tempDir.deleteDir()
        tempDir.mkdirs()
        
        // 解压AAR
        copy {
            from zipTree(aarFile)
            into tempDir
        }
        
        // 删除不需要的文件
        delete file("${tempDir}/R.txt")
//        delete file("${tempDir}/AndroidManifest.xml")
        // 完全删除META-INF目录
        delete file("${tempDir}/META-INF")
        
        // 处理classes.jar中的META-INF
        def classesJar = file("${tempDir}/classes.jar")
        if (classesJar.exists()) {
            def classesTemp = file("build/temp-classes-${System.currentTimeMillis()}")
            classesTemp.deleteDir()
            classesTemp.mkdirs()
            
            // 解压classes.jar
            copy {
                from zipTree(classesJar)
                into classesTemp
            }
            
            // 删除classes.jar中的META-INF目录中的非必要文件，保留MANIFEST.MF
            def metaInfDir = file("${classesTemp}/META-INF")
            if (metaInfDir.exists()) {
                metaInfDir.listFiles().each { file ->
                    if (file.name != 'MANIFEST.MF') {
                        file.delete()
                    }
                }
            }
            
            // 重新打包classes.jar
            ant.jar(destfile: classesJar, basedir: classesTemp)
            
            // 清理临时目录
            classesTemp.deleteDir()
        }
        
        // 重新打包AAR
        ant.zip(destfile: aarFile, basedir: tempDir)
        
        // 清理临时目录
        tempDir.deleteDir()
    }
    
    // 在bundleReleaseAar任务后执行清理
    tasks.named('bundleReleaseAar').configure {
        finalizedBy cleanAarFiles
    }
    
    // 在publishToMavenLocal任务后执行Maven AAR清理
    tasks.named('publishToMavenLocal').configure {
        finalizedBy cleanMavenAarFiles
    }
}

















